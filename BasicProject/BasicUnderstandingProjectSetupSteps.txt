
1. Install Android Studio

Refer=>https://reactnative.dev/docs/environment-setup

Download for linux from official website.
Extract file in=> /opt
cd /opt/android-studio/bin/
run command => ./studio.sh (Opens android studio)

2. Install the Android SDK
switch=> Appearance & Behavior → System Settings → Android SDK.
Android Studio installs the latest Android SDK by default. Building a React Native app with native code, however, requires the Android 10 (Q) SDK in particular. Additional Android SDKs can be installed through the SDK Manager in Android Studio.

To do that, open Android Studio, click on "Configure" button and select "SDK Manager".
Select the "SDK Platforms" tab from within the SDK Manager, then check the box next to "Show Package Details" in the bottom right corner. Look for and expand the Android 10 (Q) entry, then make sure the following items are checked:

Android SDK Platform 29
Intel x86 Atom_64 System Image or Google APIs Intel x86 Atom System Image
Next, select the "SDK Tools" tab and check the box next to "Show Package Details" here as well. Look for and expand the "Android SDK Build-Tools" entry, then make sure that 29.0.2 is selected.

Finally, click "Apply" to download and install the Android SDK and related build tools.

3. Configure the ANDROID_HOME environment variable

cd /home/devrath.rana/
open .bashrc file
paste code below

export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

React Native Command Line Interface

cd /var/www/html
npx react-native init AwesomeProject(Creates project)

Preparing the Android device
You will need an Android device to run your React Native Android app. This can be either a physical Android device, or more commonly, you can use an Android Virtual Device which allows you to emulate an Android device on your computer.

Either way, you will need to prepare the device to run Android apps for development.

Using a physical device
If you have a physical Android device, you can use it for development in place of an AVD by plugging it in to your computer using a USB cable and following the instructions here.

Using a virtual device
If you use Android Studio to open ./AwesomeProject/android, you can see the list of available Android Virtual Devices (AVDs) by opening the "AVD Manager" from within Android Studio. Look for an icon that looks like this:

Android Studio AVD Manager

If you have recently installed Android Studio, you will likely need to create a new AVD. Select "Create Virtual Device...", then pick any Phone from the list and click "Next", then select the Q API Level 29 image.

We recommend configuring VM acceleration on your system to improve performance. Once you've followed those instructions, go back to the AVD Manager.

Click "Next" then "Finish" to create your AVD. At this point you should be able to click on the green triangle button next to your AVD to launch it, then proceed to the next step.

Running your React Native application
Step 1: Start Metro
npx react-native start

(Open new terminal then run below command)
Step 2: Start your application
npx react-native run-android

Modifying your app
Now that you have successfully run the app, let's modify it.

Open App.js in your text editor of choice and edit some lines.
Press the R key twice or select Reload from the Developer Menu (Ctrl + M) to see your changes!

(Check your changes in your android virtual device) which opens after running => npx react-native run-android (using genymotion)


Debugging react-native

Debug with Chrome devtools
Ctrl+ m => choose Debug Js Remotely => This will open a tab in Google Chrome with this address http://localhost:8081/debugger-ui/

Using React-native-debugger

Check list of active devices => adb devices

Create Demo form=> https://blog.logrocket.com/build-better-forms-with-react-native-ui-components/

npm install --save react-native

if fonrawesome icon not showing
npx react-native link
npx react-native run-android